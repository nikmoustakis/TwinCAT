<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.12">
  <POU Name="MAIN" Id="{123221e7-7c9c-42bb-b3e5-4703cdf0b215}" SpecialFunc="None">
    <Declaration><![CDATA[PROGRAM MAIN
VAR
	
    Buffer_1                   : FB_Buffer;
    Buffer_2                   : FB_Buffer;
	
	Picker_1                   : FB_Picker_1;
	Picker_2                   : FB_Picker_2;
	
	ClearBuffer_1              : BOOL; // Clear Parts Buffer Slots from Buffer_1
	ClearBuffer_2              : BOOL; // Clear Parts Buffer Slots from Buffer_2
	
	Disable_Picker_2 		   : BOOL; //If TRUE Picker_2 finishes current job and remains IDLE at Carrier_Pos (place part from Buffer)
	Disable_Picker_1 		   : BOOL; //IF TRUE Picker_1 finished current job and remains IDLE at Cassette_Pos (pick new part)
	
	//Serial Part Number
	Serial_Number_Generator    : UDINT; //Pseudo New Part Generator; creates Serial for every new part in the cassette
	
	New_Part_Serial_Number     : UDINT; //New Part Serial Number in Cassette (picked from Cassette by Picker_1)
	Carrier_Part_Serial_Number : UDINT; //Latest Carrier Part Serial Number (handed over to Carrier by Picker_2)
	
	
	Clear_Serial_Number        : BOOL; //when TRUE reset Serial_Number_Generator to 0
	
	New_Part_Ack               : BOOL; //When TRUE Picker_1 acknowledges placing of new Part Serial Number on BufferSlot; Picker_2 resets it when picks part
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[
Buffer_1();
Buffer_2();

Picker_1();
Picker_2();


_M_Sequence_Picker1(); // Run Picker_1 Pick from Cassette & Place to Buffer_1/Buffer_2 Sequence
_M_Sequence_Picker2(); // Run Picker_2 Pick from Availble Buffer_1/Buffer_2 Slot & Place to Carrier





IF ClearBuffer_1 THEN        //if TRUE it empties all Buffer_1 Part Slots
	Buffer_1.M_ClearBuffer();
	ClearBuffer_1 := FALSE;
END_IF


IF ClearBuffer_2 THEN      // if TRUE it empties all Buffer_2 Part Slots
	Buffer_2.M_ClearBuffer();
	ClearBuffer_2 := FALSE;
END_IF

IF Disable_Picker_2 THEN  //If TRUE Picker_2 finishes current job and remains IDLE at Carrier
	Picker_2.M_DisablePicker();
ELSE
	Picker_2.M_EnablePicker();
END_IF

IF Disable_Picker_1 THEN //If TRUE Picker_1 finishes current job and remains IDLE at Cassette
	Picker_1.M_DisablePicker();
ELSE
	Picker_1.M_EnablePicker();
END_IF

IF Clear_Serial_Number THEN //If TRUE it resets Serial Part Generator to 0
	Serial_Number_Generator := 0;
	Clear_Serial_Number := FALSE;
END_IF

New_Part_Serial_Number := Serial_Number_Generator; //Sim serial number for every new part]]></ST>
    </Implementation>
    <Method Name="_M_Sequence_Picker1" Id="{9926135b-7636-49db-b507-9346eabc7531}">
      <Declaration><![CDATA[METHOD PUBLIC _M_Sequence_Picker1 : BOOL
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF Picker_1.State = E_PickerFixedState.Idle AND   //If both buffers are empty and both Pickers are idle, Picker1 is picking a part
	Picker_2.State = E_PickerFixedState.Idle AND  //to initiate the pick-place sequence
	Buffer_1.IsEmpty AND Buffer_2.IsEmpty THEN 
	
	Picker_1.M_MoveToPickPos();
END_IF


CASE Picker_1.State OF
	
	E_PickerFixedState.Idle:
	
		IF NOT Picker_1.Disable_Picker THEN 
			Picker_1.M_PickPart();
		END_IF
	
	E_PickerFixedState.InPickedPos:
	
		IF Picker_1.Disable_Picker THEN 
			Picker_1.M_IdleState();
		ELSE
			Picker_1.M_PickPart();
		END_IF
		
		
	E_PickerFixedState.PartPicked:
	
	
		Picker_1.P_TargetPosition_Buffer := 0; //Initialize Buffer Position to zero 
	
		IF (Picker_2.TargetBuffer_Is_2 OR  ((Picker_2.State = E_PickerFixedState.Idle) OR (Picker_2.State >= E_PickerFixedState.InPlacedPos) )) AND NOT Buffer_1.IsFull  THEN 
			
				Picker_1.P_TargetPosition_Buffer := Buffer_1.M_Find_First_Empty_Pos(); //Find  available position in the buffer
				
				IF Picker_1.TargetPosition_Buffer <> 0 THEN 
					Picker_1.M_TargetBuffer_Is_1();   //Picker_1 will go to deliver part to Buffer_1 since either Picker_2 is idle or is busy with Buffer_B
				END_IF
				
		ELSIF ((Picker_2.State = E_PickerFixedState.Idle) OR (Picker_2.State >= E_PickerFixedState.InPlacedPos)) AND NOT Buffer_2.IsFull    THEN 
			
				Picker_1.P_TargetPosition_Buffer := Buffer_2.M_Find_First_Empty_Pos(); //Find position available position in the buffer
		
				IF Picker_1.TargetPosition_Buffer <> 0 THEN 
					Picker_1.M_TargetBuffer_Is_2();   //Picker_1 will go to deliver part to Buffer_1 since either Picker_2 is idle or is busy with Buffer_B
				END_IF
		
		
		
		END_IF
		
		IF NOT New_Part_Ack THEN 
			Serial_Number_Generator := Serial_Number_Generator + 1;
			New_Part_Ack := TRUE;
		END_IF
	
		
		IF  Picker_1.TargetPosition_Buffer <> 0 THEN //If there is valid buffer target position, pass buffer type and the buffer position for the Picker to place the part
			Picker_1.M_MoveToPlacePos(Buffer_1_InUse := Picker_1.TargetBuffer_Is_1, Buffer_Pos := Picker_1.TargetPosition_Buffer   ); //Pseudo code to send the Picker to the respective buffer position (buffer type + buffer position)
		END_IF
		
	
	E_PickerFixedState.InPlacedPos:
		Picker_1.M_PlacePart();
			
	E_PickerFixedState.PartPlaced:
	
		New_Part_Ack := FALSE; //Reset Serial Number Handover Acknowledgement bit
		Picker_1.M_MoveToPickPos();
		
		IF Picker_1.TargetBuffer_Is_1 THEN 
			Buffer_1.M_PlacePartInBuffer(Picker_1.TargetPosition_Buffer,New_Part_Serial_Number);
		ELSE 
			Buffer_2.M_PlacePartInBuffer(Picker_1.TargetPosition_Buffer,New_Part_Serial_Number);
		END_IF
		
	

END_CASE]]></ST>
      </Implementation>
    </Method>
    <Method Name="_M_Sequence_Picker2" Id="{64727e4b-e6d8-46c2-b472-ad2dd94096ca}">
      <Declaration><![CDATA[METHOD PUBLIC _M_Sequence_Picker2 : BOOL
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[CASE Picker_2.State OF 
	
	E_PickerFixedState.PartPlaced :
	
		IF Picker_1.TargetBuffer_Is_1 THEN //If Picker_1 is in Buffer_1 then Picker_2 can pick part from Buffer_2 with no Collision Risk
			IF NOT Buffer_2.IsEmpty THEN 
				
				Picker_2.P_TargetPosition_Buffer := Buffer_2.M_Find_First_Occupied_Pos(); //If Buffer_2 has at least one part, find first available location
			
				IF (Picker_2.TargetPosition_Buffer <> 0)  AND (Picker_1.State <= E_PickerFixedState.PartPicked)  THEN //If Buffer returns available valid position ( no zero) then 
					Picker_2.M_TargetBuffer_Is_2();         //set Buffer_2 as target buffer and set to the Picker_2 the position of the buffer 
					Picker_2.M_MoveToPickPos(Buffer_1_InUse:= FALSE , Buffer_Pos := Picker_2.TargetPosition_Buffer );
				
				END_IF
				
			ELSE //If Buffer_1 Is Empty and Picker_1 is Idle then Picker_2 should move to Buffer_2
				Picker_2.P_TargetPosition_Buffer := Buffer_1.M_Find_First_Occupied_Pos(); //If Buffer_2 has at least one part, find first available location
			
				IF (Picker_2.TargetPosition_Buffer <> 0) AND (Picker_1.State <= E_PickerFixedState.PartPicked) THEN //If Buffer returns available valid position ( no zero) then 
					Picker_2.M_TargetBuffer_Is_1();         //set Buffer_2 as target buffer and set to the Picker_2 the position of the buffer 
					Picker_2.M_MoveToPickPos(Buffer_1_InUse:= TRUE , Buffer_Pos := Picker_2.TargetPosition_Buffer );
				
				END_IF
			
			END_IF
			
		ELSIF Picker_1.TargetBuffer_Is_2 AND (Picker_1.State <= E_PickerFixedState.PartPicked)  THEN 
			
			IF NOT Buffer_1.IsEmpty THEN 
				
				Picker_2.P_TargetPosition_Buffer := Buffer_1.M_Find_First_Occupied_Pos(); //If Buffer_2 has at least one part, find first available location
			
				IF Picker_2.TargetPosition_Buffer <> 0 THEN //If Buffer returns available valid position ( no zero) then 
					Picker_2.M_TargetBuffer_Is_1();         //set Buffer_2 as target buffer and set to the Picker_2 the position of the buffer 
					Picker_2.M_MoveToPickPos(Buffer_1_InUse:= TRUE , Buffer_Pos := Picker_2.TargetPosition_Buffer );
				
				END_IF
				
			ELSE //If Buffer_1 Is Empty and Picker_1 is Idle then Picker_2 should move to Buffer_2
				Picker_2.P_TargetPosition_Buffer := Buffer_2.M_Find_First_Occupied_Pos(); //If Buffer_2 has at least one part, find first available location
			
				IF Picker_2.TargetPosition_Buffer <> 0 THEN //If Buffer returns available valid position ( no zero) then 
					Picker_2.M_TargetBuffer_Is_2();         //set Buffer_2 as target buffer and set to the Picker_2 the position of the buffer 
					Picker_2.M_MoveToPickPos(Buffer_1_InUse:= FALSE , Buffer_Pos := Picker_2.TargetPosition_Buffer );
				
				END_IF
			END_IF
			
		
		END_IF
		
		Carrier_Part_Serial_Number := Picker_2.Part_SerialNumber;
		
	E_PickerFixedState.InPickedPos:
		Picker_2.M_PickPart();
	
			
	E_PickerFixedState.PartPicked:
				
		
		
//		IF Picker_2.TargetBuffer_Is_1 THEN 
//			Picker_2.P_Part_SerialNumber :=  Buffer_1.M_PickPartFromBuffer(Picker_2.TargetPosition_Buffer);
			
//		ELSE 
//			Picker_2.P_Part_SerialNumber := Buffer_2.M_PickPartFromBuffer(Picker_2.TargetPosition_Buffer);
//		END_IF
	
		Picker_2.P_Part_SerialNumber := SEL(Picker_2.TargetBuffer_Is_1,Buffer_2.M_PickPartFromBuffer(Picker_2.TargetPosition_Buffer),Buffer_1.M_PickPartFromBuffer(Picker_2.TargetPosition_Buffer));
	
		Picker_2.M_MoveToPlacePos();
			
	E_PickerFixedState.InPlacedPos:
	
		IF Picker_2.Disable_Picker THEN 
			Picker_2.M_IdleState();
		ELSE
			Picker_2.M_PlacePart();
		END_IF
			
	E_PickerFixedState.Idle:
	
		IF NOT Picker_2.Disable_Picker THEN 
			Picker_2.M_PlacePart();
		END_IF

END_CASE]]></ST>
      </Implementation>
    </Method>
    <LineIds Name="MAIN">
      <LineId Id="79" Count="1" />
      <LineId Id="90" Count="0" />
      <LineId Id="153" Count="0" />
      <LineId Id="152" Count="0" />
      <LineId Id="154" Count="0" />
      <LineId Id="86" Count="0" />
      <LineId Id="88" Count="0" />
      <LineId Id="99" Count="0" />
      <LineId Id="207" Count="0" />
      <LineId Id="332" Count="0" />
      <LineId Id="334" Count="0" />
      <LineId Id="84" Count="0" />
      <LineId Id="70" Count="0" />
      <LineId Id="202" Count="0" />
      <LineId Id="2" Count="0" />
      <LineId Id="203" Count="0" />
      <LineId Id="206" Count="0" />
      <LineId Id="204" Count="0" />
      <LineId Id="304" Count="4" />
      <LineId Id="303" Count="0" />
      <LineId Id="368" Count="0" />
      <LineId Id="367" Count="0" />
      <LineId Id="369" Count="0" />
      <LineId Id="479" Count="1" />
      <LineId Id="370" Count="0" />
      <LineId Id="395" Count="2" />
      <LineId Id="481" Count="1" />
      <LineId Id="394" Count="0" />
      <LineId Id="571" Count="0" />
      <LineId Id="570" Count="0" />
      <LineId Id="572" Count="0" />
      <LineId Id="574" Count="0" />
      <LineId Id="573" Count="0" />
      <LineId Id="561" Count="0" />
      <LineId Id="560" Count="0" />
    </LineIds>
    <LineIds Name="MAIN._M_Sequence_Picker1">
      <LineId Id="6" Count="76" />
      <LineId Id="5" Count="0" />
    </LineIds>
    <LineIds Name="MAIN._M_Sequence_Picker2">
      <LineId Id="9" Count="85" />
      <LineId Id="5" Count="0" />
    </LineIds>
  </POU>
</TcPlcObject>