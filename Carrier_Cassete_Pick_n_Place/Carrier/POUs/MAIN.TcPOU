<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.12">
  <POU Name="MAIN" Id="{123221e7-7c9c-42bb-b3e5-4703cdf0b215}" SpecialFunc="None">
    <Declaration><![CDATA[PROGRAM MAIN
VAR
	Picker1_YPos : INT; // Y Position of Picker 1
    Picker2_YPos : INT; // Y Position of Picker 2
   // BufferA_Flag : ARRAY[1..5] OF BOOL := [FALSE, FALSE, FALSE, FALSE, FALSE]; // TRUE if a position in Buffer A is in use
   // BufferB_Flag : ARRAY[1..5] OF BOOL := [FALSE, FALSE, FALSE, FALSE, FALSE]; // TRUE if a position in Buffer B is in use
    Buffer_1 : FB_Buffer;
    Buffer_2 : FB_Buffer;
	
	Picker_1  : FB_Picker_1;
	Picker_2  : FB_Picker_2;
	
	
	
	
	ClearBuffer_1 : BOOL;
	ClearBuffer_2 : BOOL;
	
	Disable_Picker_2 : BOOL;
	Disable_Picker_1 : BOOL;
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[
Buffer_1();
Buffer_2();

Picker_1();
Picker_2();
//CASE Picker_1.State OF
	
//	E_PickerFixedState.:
		

IF Picker_1.State = E_PickerFixedState.Idle AND   //If both buffers are empty and both Pickers are idle, Picker1 is picking a part
	Picker_2.State = E_PickerFixedState.Idle AND  //to initiate the pick-place sequence
	Buffer_1.IsEmpty AND Buffer_2.IsEmpty THEN 
	
	Picker_1.M_MoveToPickPos();
END_IF

CASE Picker_1.State OF
	
	E_PickerFixedState.Idle:
		IF NOT Picker_1.Disable_Picker THEN 
			Picker_1.M_PickPart();
		END_IF
	
	E_PickerFixedState.InPickedPos:
	
	IF Picker_1.Disable_Picker THEN 
		Picker_1.M_IdleState();
	ELSE
		Picker_1.M_PickPart();
	END_IF
		
		
	E_PickerFixedState.PartPicked:
	
	
		Picker_1.P_TargetPosition_Buffer := 0; //Initialize Buffer Position to zero 
	
		IF (Picker_2.TargetBuffer_Is_2 OR  ((Picker_2.State = E_PickerFixedState.Idle) OR (Picker_2.State >= E_PickerFixedState.InPlacedPos) )) AND NOT Buffer_1.IsFull  THEN 
			
				Picker_1.P_TargetPosition_Buffer := Buffer_1.M_Find_First_Empty_Pos(); //Find  available position in the buffer
				
				IF Picker_1.TargetPosition_Buffer <> 0 THEN 
					Picker_1.M_TargetBuffer_Is_1();   //Picker_1 will go to deliver part to Buffer_1 since either Picker_2 is idle or is busy with Buffer_B
				END_IF
				
		ELSIF ((Picker_2.State = E_PickerFixedState.Idle) OR (Picker_2.State >= E_PickerFixedState.InPlacedPos)) AND NOT Buffer_2.IsFull    THEN 
			
				Picker_1.P_TargetPosition_Buffer := Buffer_2.M_Find_First_Empty_Pos(); //Find position available position in the buffer
		
				IF Picker_1.TargetPosition_Buffer <> 0 THEN 
					Picker_1.M_TargetBuffer_Is_2();   //Picker_1 will go to deliver part to Buffer_1 since either Picker_2 is idle or is busy with Buffer_B
				END_IF
		
		
		
		END_IF
		
	
		
		IF  Picker_1.TargetPosition_Buffer <> 0 THEN //If there is valid buffer target position, pass buffer type and the buffer position for the Picker to place the part
			Picker_1.M_MoveToPlacePos(Buffer_1_InUse := Picker_1.TargetBuffer_Is_1, Buffer_Pos := Picker_1.TargetPosition_Buffer   ); //Pseudo code to send the Picker to the respective buffer position (buffer type + buffer position)
		END_IF
		
	
	E_PickerFixedState.InPlacedPos:
		Picker_1.M_PlacePart();
			
	E_PickerFixedState.PartPlaced:
		Picker_1.M_MoveToPickPos();
		
		IF Picker_1.TargetBuffer_Is_1 THEN 
			Buffer_1.M_PlacePartInBuffer(Picker_1.TargetPosition_Buffer);
		ELSE 
			Buffer_2.M_PlacePartInBuffer(Picker_1.TargetPosition_Buffer);
		END_IF
		
	

END_CASE


CASE Picker_2.State OF 
	
	E_PickerFixedState.PartPlaced :
	
		IF Picker_1.TargetBuffer_Is_1 THEN //If Picker_1 is in Buffer_1 then Picker_2 can pick part from Buffer_2 with no Collision Risk
			IF NOT Buffer_2.IsEmpty THEN 
				
				Picker_2.P_TargetPosition_Buffer := Buffer_2.M_Find_First_Occupied_Pos(); //If Buffer_2 has at least one part, find first available location
			
				IF Picker_2.TargetPosition_Buffer <> 0 THEN //If Buffer returns available valid position ( no zero) then 
					Picker_2.M_TargetBuffer_Is_2();         //set Buffer_2 as target buffer and set to the Picker_2 the position of the buffer 
					Picker_2.M_MoveToPickPos(Buffer_1_InUse:= FALSE , Buffer_Pos := Picker_2.TargetPosition_Buffer );
				
				END_IF
				
			ELSE //If Buffer_1 Is Empty and Picker_1 is Idle then Picker_2 should move to Buffer_2
				Picker_2.P_TargetPosition_Buffer := Buffer_1.M_Find_First_Occupied_Pos(); //If Buffer_2 has at least one part, find first available location
			
				IF Picker_2.TargetPosition_Buffer <> 0 THEN //If Buffer returns available valid position ( no zero) then 
					Picker_2.M_TargetBuffer_Is_1();         //set Buffer_2 as target buffer and set to the Picker_2 the position of the buffer 
					Picker_2.M_MoveToPickPos(Buffer_1_InUse:= TRUE , Buffer_Pos := Picker_2.TargetPosition_Buffer );
				
				END_IF
			
			END_IF
			
		ELSIF Picker_1.TargetBuffer_Is_2 AND (Picker_1.State <= E_PickerFixedState.PartPicked)  THEN 
			
			IF NOT Buffer_1.IsEmpty THEN 
				
				Picker_2.P_TargetPosition_Buffer := Buffer_1.M_Find_First_Occupied_Pos(); //If Buffer_2 has at least one part, find first available location
			
				IF Picker_2.TargetPosition_Buffer <> 0 THEN //If Buffer returns available valid position ( no zero) then 
					Picker_2.M_TargetBuffer_Is_1();         //set Buffer_2 as target buffer and set to the Picker_2 the position of the buffer 
					Picker_2.M_MoveToPickPos(Buffer_1_InUse:= TRUE , Buffer_Pos := Picker_2.TargetPosition_Buffer );
				
				END_IF
				
			ELSE //If Buffer_1 Is Empty and Picker_1 is Idle then Picker_2 should move to Buffer_2
				Picker_2.P_TargetPosition_Buffer := Buffer_2.M_Find_First_Occupied_Pos(); //If Buffer_2 has at least one part, find first available location
			
				IF Picker_2.TargetPosition_Buffer <> 0 THEN //If Buffer returns available valid position ( no zero) then 
					Picker_2.M_TargetBuffer_Is_2();         //set Buffer_2 as target buffer and set to the Picker_2 the position of the buffer 
					Picker_2.M_MoveToPickPos(Buffer_1_InUse:= FALSE , Buffer_Pos := Picker_2.TargetPosition_Buffer );
				
				END_IF
			END_IF
			
		
		END_IF
		
		
	E_PickerFixedState.InPickedPos:
		Picker_2.M_PickPart();
	
			
	E_PickerFixedState.PartPicked:
				
		IF Picker_2.TargetBuffer_Is_1 THEN 
			Buffer_1.M_PickPartFromBuffer(Picker_2.TargetPosition_Buffer);
		ELSE 
			Buffer_2.M_PickPartFromBuffer(Picker_2.TargetPosition_Buffer);
		END_IF
	
	
			Picker_2.M_MoveToPlacePos();
			
	E_PickerFixedState.InPlacedPos:
	
	IF Picker_2.Disable_Picker THEN 
		Picker_2.M_IdleState();
	ELSE
		Picker_2.M_PlacePart();
	END_IF
			
	E_PickerFixedState.Idle:
	
	IF NOT Picker_2.Disable_Picker THEN 
		Picker_2.M_PlacePart();
	END_IF

END_CASE



IF ClearBuffer_1 THEN 
	Buffer_1.M_ClearBuffer();
	ClearBuffer_1 := FALSE;
END_IF


IF ClearBuffer_2 THEN 
	Buffer_2.M_ClearBuffer();
	ClearBuffer_2 := FALSE;
END_IF

IF Disable_Picker_2 THEN 
	Picker_2.M_DisablePicker();
ELSE
	Picker_2.M_EnablePicker();
END_IF

IF Disable_Picker_1 THEN 
	Picker_1.M_DisablePicker();
ELSE
	Picker_1.M_EnablePicker();
END_IF]]></ST>
    </Implementation>
    <LineIds Name="MAIN">
      <LineId Id="79" Count="1" />
      <LineId Id="90" Count="0" />
      <LineId Id="153" Count="0" />
      <LineId Id="152" Count="0" />
      <LineId Id="154" Count="0" />
      <LineId Id="72" Count="0" />
      <LineId Id="87" Count="0" />
      <LineId Id="77" Count="0" />
      <LineId Id="86" Count="0" />
      <LineId Id="88" Count="0" />
      <LineId Id="85" Count="0" />
      <LineId Id="91" Count="0" />
      <LineId Id="93" Count="0" />
      <LineId Id="95" Count="0" />
      <LineId Id="94" Count="0" />
      <LineId Id="92" Count="0" />
      <LineId Id="96" Count="1" />
      <LineId Id="496" Count="1" />
      <LineId Id="499" Count="0" />
      <LineId Id="502" Count="0" />
      <LineId Id="498" Count="0" />
      <LineId Id="103" Count="0" />
      <LineId Id="98" Count="0" />
      <LineId Id="473" Count="2" />
      <LineId Id="477" Count="1" />
      <LineId Id="476" Count="0" />
      <LineId Id="102" Count="0" />
      <LineId Id="100" Count="0" />
      <LineId Id="104" Count="1" />
      <LineId Id="292" Count="0" />
      <LineId Id="290" Count="1" />
      <LineId Id="155" Count="1" />
      <LineId Id="171" Count="4" />
      <LineId Id="293" Count="3" />
      <LineId Id="160" Count="0" />
      <LineId Id="298" Count="3" />
      <LineId Id="381" Count="0" />
      <LineId Id="297" Count="0" />
      <LineId Id="157" Count="0" />
      <LineId Id="177" Count="1" />
      <LineId Id="187" Count="3" />
      <LineId Id="167" Count="0" />
      <LineId Id="176" Count="0" />
      <LineId Id="191" Count="4" />
      <LineId Id="168" Count="0" />
      <LineId Id="196" Count="1" />
      <LineId Id="199" Count="1" />
      <LineId Id="198" Count="0" />
      <LineId Id="494" Count="1" />
      <LineId Id="101" Count="0" />
      <LineId Id="99" Count="0" />
      <LineId Id="207" Count="0" />
      <LineId Id="332" Count="0" />
      <LineId Id="255" Count="0" />
      <LineId Id="333" Count="0" />
      <LineId Id="336" Count="0" />
      <LineId Id="338" Count="1" />
      <LineId Id="337" Count="0" />
      <LineId Id="354" Count="0" />
      <LineId Id="340" Count="1" />
      <LineId Id="344" Count="0" />
      <LineId Id="347" Count="1" />
      <LineId Id="345" Count="1" />
      <LineId Id="408" Count="0" />
      <LineId Id="410" Count="7" />
      <LineId Id="409" Count="0" />
      <LineId Id="349" Count="0" />
      <LineId Id="353" Count="0" />
      <LineId Id="343" Count="0" />
      <LineId Id="355" Count="9" />
      <LineId Id="399" Count="1" />
      <LineId Id="402" Count="5" />
      <LineId Id="401" Count="0" />
      <LineId Id="352" Count="0" />
      <LineId Id="350" Count="1" />
      <LineId Id="342" Count="0" />
      <LineId Id="371" Count="3" />
      <LineId Id="388" Count="0" />
      <LineId Id="375" Count="1" />
      <LineId Id="447" Count="4" />
      <LineId Id="444" Count="2" />
      <LineId Id="377" Count="2" />
      <LineId Id="483" Count="0" />
      <LineId Id="485" Count="3" />
      <LineId Id="484" Count="0" />
      <LineId Id="380" Count="0" />
      <LineId Id="489" Count="1" />
      <LineId Id="492" Count="0" />
      <LineId Id="491" Count="0" />
      <LineId Id="493" Count="0" />
      <LineId Id="335" Count="0" />
      <LineId Id="334" Count="0" />
      <LineId Id="84" Count="0" />
      <LineId Id="70" Count="0" />
      <LineId Id="202" Count="0" />
      <LineId Id="2" Count="0" />
      <LineId Id="203" Count="0" />
      <LineId Id="206" Count="0" />
      <LineId Id="204" Count="0" />
      <LineId Id="304" Count="4" />
      <LineId Id="303" Count="0" />
      <LineId Id="368" Count="0" />
      <LineId Id="367" Count="0" />
      <LineId Id="369" Count="0" />
      <LineId Id="479" Count="1" />
      <LineId Id="370" Count="0" />
      <LineId Id="395" Count="2" />
      <LineId Id="481" Count="1" />
      <LineId Id="394" Count="0" />
    </LineIds>
  </POU>
</TcPlcObject>